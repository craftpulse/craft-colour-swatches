// src/index.ts
import fs from "fs";
import path from "path";
import {bold, dim, yellow} from "chalk";
import micromatch from "micromatch";
function touch(path2) {
  const time = new Date();
  try {
    fs.utimesSync(path2, time, time);
  } catch (err) {
    fs.closeSync(fs.openSync(path2, "w"));
  }
}
var i = 0;
function toArray(arr) {
  if (!arr)
    return [];
  if (Array.isArray(arr))
    return arr;
  return [arr];
}
function VitePluginRestart(options = {}) {
  const {
    delay = 500,
    glob: enableGlob = true
  } = options;
  let root = process.cwd();
  let reloadGlobs = [];
  let restartGlobs = [];
  let configFile = "vite.config.js";
  let timerState = "reload";
  let timer;
  const pathPlatform = process.platform === "win32" ? path.win32 : path.posix;
  function clear() {
    clearTimeout(timer);
  }
  function schedule(fn) {
    clear();
    timer = setTimeout(fn, delay);
  }
  return {
    name: `vite-plugin-restart:${i++}`,
    apply: "serve",
    config(c) {
      if (!enableGlob)
        return;
      if (!c.server)
        c.server = {};
      if (!c.server.watch)
        c.server.watch = {};
      c.server.watch.disableGlobbing = false;
    },
    configResolved(config) {
      if (fs.existsSync("vite.config.ts"))
        configFile = "vite.config.ts";
      root = config.root;
      reloadGlobs = toArray(options.reload).map((i2) => pathPlatform.resolve(root, i2));
      restartGlobs = toArray(options.restart).map((i2) => pathPlatform.resolve(root, i2));
    },
    configureServer(server) {
      server.watcher.add([
        ...restartGlobs,
        ...reloadGlobs
      ]);
      server.watcher.on("change", (file) => {
        if (micromatch.isMatch(file, restartGlobs)) {
          timerState = "restart";
          schedule(() => {
            touch(configFile);
            console.log(dim(new Date().toLocaleTimeString()) + bold.blue` [plugin-restart] ` + yellow`restarting server by ${pathPlatform.relative(root, file)}`);
            timerState = "";
          });
        } else if (micromatch.isMatch(file, reloadGlobs) && timerState !== "restart") {
          timerState = "reload";
          schedule(() => {
            server.ws.send({type: "full-reload"});
            timerState = "";
          });
        }
      });
    }
  };
}
var src_default = VitePluginRestart;
export {
  src_default as default
};
